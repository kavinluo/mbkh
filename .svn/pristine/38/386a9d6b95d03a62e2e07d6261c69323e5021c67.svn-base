<!--
 * @Author: kevin
 * @Date: 2022-03-03 09:40:43
 * @LastEditors: kevin
 * @LastEditTime: 2022-04-28 09:41:31
 * @Description: form 表单
-->
<template>
  <el-form :label-width="labelWidth" :model="isVerify ? modelValue : null" ref="ruleFormRef">
    <div class="header">
      <slot name="header"></slot>
    </div>
    <el-row>
      <template v-for="item in formItems" :key="item.labe">
        <el-col v-bind="item.span ? item.span : colLayout">
          <el-form-item
            v-if="!item.isHidden && item.type !== 'colSlot'"
            :label="item.label"
            :rules="item.rules"
            :prop="item.field"
            :style="item.formItemsStyle ? item.formItemsStyle : itemStyle"
            :class="item.itemClassName">
            <template v-if="item.type === 'input' || item.type === 'password' || item.type === 'number'"> <!--- to do -->
              <el-input
                clearable
                :disabled="item.disabled"
                :type="item.type"
                :placeholder="item.placeholder"
                v-bind="item.otherOptions"
                :show-password="item.type === 'password'"
                :model-value="modelValue[`${item.field}`]"
                @update:modelValue="handleValueChange($event, item.field)"
              />
            </template>
            <template v-else-if="item.type === 'textarea'">
              <el-input
                :disabled="item.disabled"
                :model-value="modelValue[`${item.field}`]"
                v-bind="item.otherOptions"
                @update:modelValue="handleValueChange($event, item.field)"
                :autosize="item.autosize"
                :type="item.type"
                :placeholder="item.placeholder"
              />
            </template>
            <template v-else-if="item.type === 'select'">
              <el-select
                clearable
                :disabled="item.disabled"
                :placeholder="item.placeholder"
                v-bind="item.otherOptions"
                style="width: 100%"
                @change="handleSelect"
                :model-value="modelValue[`${item.field}`]"
                @update:modelValue="handleValueChange($event, item.field)">
                <el-option
                  v-for="(option, index) in item.options"
                  :key="index"
                  :value="option[item?.optionValue || 'value']"
                  :label="option[item?.optionLabel || 'label']"></el-option>
              </el-select>
            </template>
            <template v-else-if="item.type === 'datepicker'">
              <el-date-picker
                style="width: 100%"
                :type="item.dateType"
                start-placeholder="开始时间"
                end-placeholder="结束时间"
                :format="item.format"
                v-bind="item.otherOptions"
                :model-value="modelValue[`${item.field}`]"
                @update:modelValue="handleValueChange($event, item.field)"></el-date-picker>
            </template>
            <template v-else-if="item.type === 'slot'">
              <slot :name="item.slotName" :label="item.label"></slot>
            </template>
            <p v-if="item.help" style="margin: 0; font-size:12px;color:#ccc;line-height:1.2">{{ item.help }}</p>
          </el-form-item>
          <template v-if="item.type === 'colSlot'">
            <slot :name="item.slotName" :label="item.label"></slot>
          </template>
        </el-col>
      </template>
    </el-row>
  </el-form>
  <div class="footer">
    <slot name="footer"></slot>
  </div>
  <div v-if="showLine" style="border-bottom: 9px solid rgb(220 233 244);margin: 0 -15px 16px;"></div>
</template>

<script setup>
const props = defineProps({
    labelWidth: {
      type: String,
      default: '100px'
    },
    // item.type: 是关于插槽需要显示的位置 slot（显示在el-form-item里面） | colSlot（显示在el-col里面）
    formItems: {
      type: Array,
      default: () => []
    },
    modelValue: {
      type: Object,
      required: true
    },
    itemStyle: {
      type: Object,
      default: () => {}
    },
    colLayout: {
      type: Object,
      default: () => ({
        xl: 6, // >1920px 4个
        lg: 8,
        md: 12,
        sm: 24,
        xs: 24
      })
    },
    showLine: { // 显示页脚分割线
      type: Boolean,
      default: false
    },
    isVerify: { // 表单是否需要验证
      type: Boolean,
      default: false
    }

  })
const emit = defineEmits(['update:modelValue', 'callBack', 'call'])

const handleValueChange = (value, field) => {
      emit('update:modelValue', { ...props.modelValue, [field]: value }) // 双向绑定需要同时更新
    }

    const handleSelect = (val) => {
      console.log('val', val)
      emit('call', val)
    }
</script>
<script>
export default {
  name: 'KvForm'
}
</script>

<style lang="less">
  .searchBtn {
    .el-form-item__label-wrap {
      display: none;
    }
  }
</style>
