<!--
 * @Author: kevin
 * @Date: 2022-03-24 15:52:07
 * @LastEditors: kevin
 * @LastEditTime: 2022-05-10 17:32:20
 * @Description: 添加指标信息
-->

<template>
  <el-form :model="formData" label-width="120px" :rules="rules" ref="ruleFormRef">
    <el-form-item label="名称：" prop="title">
      <el-input v-model="formData.title" />
    </el-form-item>
    <el-form-item label="选择评分模板：">
      <div> {{ formData.mouldName }}</div> &nbsp; &nbsp;
      <el-button type="primary" size="small" @click="handleSelectTmpalte" v-if="inuptType !== 'edit'">选择评分模板</el-button>
    </el-form-item>
    <el-form-item label="考评内容：" style="margin-bottom: 10px">
      <el-button type="primary" size="small" @click="handleEdit(null, 'add', 0)">添加</el-button> &nbsp; &nbsp;
    </el-form-item>
    <el-form-item class="myform">
      <div>
        <div style="border-bottom: solid 1px #ddd; display: flex;" v-for="(item, index) in evaluateQuotaDetailedDtoList" :key="item.title">
          <div style="flex: 1;line-height: 1.4;padding-top:5px">
            <template v-for="sub in item.showContent" :key="sub.id">
              <!-- 此处只需显示内容 -->
              <span v-if="sub.template.includes('内容')"> {{ sub.template }}：{{ sub.content }}</span>
            </template>
          </div>
          <span style="">
            <el-icon style="cursor: pointer;" :size="16" color="#409EFF" @click="handleEdit(item, 'edit', index)"><edit /></el-icon>&nbsp;&nbsp;
            <el-icon :size="16" color="#F56C6C" style="cursor: pointer;" @click="handleRemove(item, index)"><delete /></el-icon>
          </span>
        </div>
      </div>
    </el-form-item>
    <el-form-item label="总分：">
      {{ formData.countScore }}
    </el-form-item>
    <el-form-item>
      <el-button type="primary" @click="onSubmit(ruleFormRef)">提交</el-button>
      <el-button type="warning" @click="cancelTargetModel">关闭</el-button>
    </el-form-item>
  </el-form>

  <kvDialog v-bind="selectConfig" v-model="selectConfig.dialogVisible" @cancel="cancel" @callBack="confirm">
    <kv-table
      :useTableData="useTableData"
      :pageInfo="pageInfo"
      @update:pageInfo="pageInfo = $event"
      :listTotal="listTotal"
      :propList="templatePropList"
      :isUseStoreData="false"
      :isRadio="true"
      :useSize="[5,10, 20, 30]"
      :showIndexColumn="true"
      @handleSelectionChange="handleSelectionChange">
    </kv-table>
  </kvDialog>
  <kvDialog v-bind="contModel" v-model="contModel.dialogVisible">
    <add-content :userTemplate="userTemplate" :edit-type="editType" :rowData="rowData" @cancel="cancelContenModel" @callBack="callContent" />
  </kvDialog>

</template>

<script setup>
import { ref, watch, getCurrentInstance } from 'vue'
import { selectModelConfig, templatePropList, contModelConfig, rules } from './config/config'
import { get, add, modify } from '@/api/quota'
import { getListPage } from '@/api/template'
import addContent from './addContent.vue'
import { useStore } from '@/store'

const { quotaData, inuptType, quotaRowData } = defineProps({
    quotaRowData: {
      type: Object,
      default: () => ({})
    },
    quotaData: {
      type: Object,
      default: null
    },
    inuptType: {
      type: String,
      default: 'add'
    }
   })
  const emit = defineEmits(['resetBtnClick', 'queryBtnClick', 'cancel', 'callBack'])
    const { proxy } = getCurrentInstance()
    const store = useStore()
    const selectConfig = ref(selectModelConfig)
    const contModel = ref(contModelConfig)
    const useSelectIndex = ref(0)
    const userTemplate = ref(null)
    const colIndex = ref(0)
    const rowData = ref(null)
    const evaluateQuotaDetailedDtoList = ref([])
    const editType = ref('add')
    const formData = ref({
      title: '',
      sort: 0, // 顺序
      parentId: quotaData?.id,
      evaluateQuotaDetailedDtoList: [],
      countScore: 0,
      mouldName: userTemplate.value?.name,
      mouldId: userTemplate.value?.id,
      level: 2
    })
    const pageInfo = ref({ curPage: 1, pageSize: 5 })
    const useTableData = ref([])

    const listTotal = ref(0)
    const getTemplateLis = async () => {
      const { data } = await getListPage(pageInfo.value)
      useTableData.value = data?.list ?? []
      listTotal.value = data.total
    }
    // 详细
    const getDetaile = async () => {
      const { data = [] } = await get(quotaRowData?.id)
      formData.value = data
      userTemplate.value = {
        name: data.mouldName,
        id: data.mouldId
      }

     evaluateQuotaDetailedDtoList.value = fromrtgetDtoList(data?.evaluateQuotaDetailedDtoList ?? [])
    }

    if (inuptType === 'edit') {
        getDetaile()
    }
    const fromrtgetDtoList = (list = []) => {
      const obj = {}
      const arrya = []
      const maxSort = [] // 编辑时找到最大的序号
      list.forEach(item => {
        item.title = item.template
        item.target = item.tips || item.target
        item.tips = item.target
        item.attributeType = item.templateType
        obj[item.sort] = obj[item.sort] || []
        obj[item.sort].push(item)
        maxSort.push(item.sort)
      })
      for (const i in obj) {
        arrya.push({
          score: obj[i][0]?.score || 0,
          sort: obj[i][0].sort,
          showContent: obj[i]
        })
      }
      colIndex.value = Math.max(...maxSort)
      return arrya
    }
    watch(
      () => pageInfo.value,
      (newValue, oldValue) => {
        pageInfo.value = newValue
        getTemplateLis()
      },
      { deep: true }
    )

    const ruleFormRef = ref()
    const cancel = (status) => {
      selectConfig.value.dialogVisible = status
      userTemplate.value = null
    }
    const cancelTargetModel = () => {
      emit('cancel')
    }
    const cancelContenModel = () => {
       contModel.value.dialogVisible = false
    }
    const confirm = () => {
       selectConfig.value.dialogVisible = false
       store.commit('changerPageSizeStatus', false)
    }
    // 输入后返回
    const callContent = (data) => {
      console.log('data', data)
      colIndex.value = data[0]?.sort ? data[0].sort : ++colIndex.value
      const obj = {
        showContent: [], // 只做显示
        template: '',
        score: '',
        templateId: '',
        attributeType: '',
        content: '',
        sort: '',
        tips: '',
        target: ''
      }
      data.forEach((item, index) => {
        item.number = index
        item.template = item.title
        item.templateId = item.id
        item.sort = item.sort || colIndex.value
        for (const key in obj) {
          obj[key] = item[key]
        }
        obj.showContent = data
        obj.target = item.attributeType === 'select' ? item.tips : null
      })
      if (editType.value === 'edit') {
        evaluateQuotaDetailedDtoList.value[useSelectIndex.value] = obj
      } else {
        evaluateQuotaDetailedDtoList.value.push(obj)
      }
      contModel.value.dialogVisible = false
      count(evaluateQuotaDetailedDtoList.value)
    }
    // 计算总分
    const count = (list) => {
      formData.value.countScore = list.reduce((per, curre) => {
        return per + (+curre.score)
      }, 0)
    }

    const handleSelectTmpalte = () => {
      selectConfig.value.dialogVisible = true
      getTemplateLis()
    }
    const handleSelectionChange = (value) => {
      console.log('value', value)
      userTemplate.value = value
      formData.value.mouldName = value.name
      formData.value.mouldId = value.id
    }
    const handleEdit = (row, type, index) => {
      store.commit('changerPageSizeStatus', false)
      editType.value = inuptType.value === 'edit' && type === 'edit' ? 'edit' : type
      if (!userTemplate.value) {
        proxy.$message.warning('请先选择评分模板！')
        return
      }
      if (type === 'edit') {
         useSelectIndex.value = index
         rowData.value = row
      } else {
        rowData.value = null
      }
      contModel.value.dialogVisible = true
    }
    const handleRemove = (row, index) => {
       evaluateQuotaDetailedDtoList.value = evaluateQuotaDetailedDtoList.value.filter(x => x.sort !== row.sort)
       count(evaluateQuotaDetailedDtoList.value)
    }

    const fn = inuptType === 'add' ? add : modify
    const onSubmit = (formEL) => {
      const useList = [] // 将所有的集合展开提交
      console.log('evaluateQuotaDetailedDtoList', evaluateQuotaDetailedDtoList)
      if (!evaluateQuotaDetailedDtoList.value.length) {
        proxy.$message.warning('请添加考评内容！')
        return
      }
       evaluateQuotaDetailedDtoList.value.forEach((item, index) => {
         item.showContent.forEach(subitem => {
           subitem.sort = index
         })
         useList.push(...item.showContent)
      })

      formData.value.evaluateQuotaDetailedDtoList = useList
      formEL?.validate((valid) => {
        if (valid) {
          fn(formData.value, '/quota').then((res) => {
            const { status } = res
            if (status?.code === '0') {
              emit('callBack')
            }
          })
        }
      })
    }
</script>

<style lang="less">
  .myform {
    .el-form-item__content {
      display: block;
    }
  }
</style>
