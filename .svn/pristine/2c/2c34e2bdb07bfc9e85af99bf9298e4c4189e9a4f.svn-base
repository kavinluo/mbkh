<!--
 * @Author: kevin
 * @Date: 2022-03-03 13:54:49
 * @LastEditors: kevin
 * @LastEditTime: 2022-07-06 14:58:52
 * @Description: 确认弹框
-->

<template>
  <el-dialog
    v-model="dialog"
    :title="title"
    :draggable="draggable"
    :width="dialogWidth"
    :destroy-on-close="destroyOnClose"
    :close-on-click-modal="false">
    <span v-if="modeType && !isImport">{{ thatMessage }}</span>
    <slot></slot>
    <template v-if="isImport">
      <el-row>
        <el-col :span="12" align="center">
          <el-upload
            style="display: inline"
            class="upload-demo"
            :action="importAPI"
            :on-success="onSuccess"
            :headers="{token: getCookie('Token')}"
          >
            <el-button type="primary">选择文件</el-button>
            <template #tip>
              <div class="el-upload__tip">
                {{ uploadMessage }}
              </div>
            </template>
          </el-upload>
        </el-col>
        <el-col :span="12" align="center">
          <el-link type="primary" :href="templateLInk">模板下载</el-link>
        </el-col>
      </el-row>
    </template>
    <template #footer v-if="isShowFooterStatus">
      <span class="dialog-footer" style="padding: 10px 20px; display:block;">
        <el-button type="primary" @click="confirm">确定</el-button>
        <el-button @click="handleClose" type="warning" v-if="isShowCancelBtn">关闭</el-button>
      </span>
    </template>
  </el-dialog>
</template>

<script setup>
  import { ref } from 'vue'
  import { getCookie } from '@/utils/util'
  import { ElMessage } from 'element-plus'
  import { remove } from '@/api/commAPI'
  import { propsList } from './props'

  const props = defineProps(propsList)
  const emit = defineEmits(['cancel', 'callBack'])

  const dialog = ref(props.dialogVisible)
  const isShowFooterStatus = ref(false)
  isShowFooterStatus.value = props.modeType === 'remove' ? true : props.isShowFooter
  const messageType = {
    remove: '删除',
    publish: '发布',
    revokePublish: '撤销发布',
    exprot: '导出',
    import: '导入',
    report: '上报'
  }
  const thatMessage = ref(`您确定要${messageType[props.modeType]}吗？`)
  const confirm = () => {
    if (props.modeType === 'remove') { // 删除接口统一 直接掉删除的接口
    console.log(props.params)
      remove(props.baseURL, props.params).then(() => {
        emit('callBack', props.modeType)
      })
    } else if (props.useFn) {
      console.log('props.params', props.params)
      if (props.params) {
        props.useFn(props.params).then(() => {
        emit('callBack', props.modeType)
      })
      } else {
        props.useFn(props.params)
        emit('callBack', props.modeType)
      }
    }
    dialog.value = false
  }
  const onSuccess = (res) => {
    if (res.status.code !== '0') {
      ElMessage.error(res.status.msg)
    }
      ElMessage.success('上传成功！')
  }
  const handleClose = (done) => {
    dialog.value = false
    emit('cancel', false)
  }
</script>
<script>
  export default {
    name: 'KvDialog'
  }
</script>
<style lang="less">
  .el-dialog__footer {
    padding: 0
  }

</style>
