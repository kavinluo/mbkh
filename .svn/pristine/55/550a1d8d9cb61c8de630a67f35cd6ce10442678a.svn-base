<!--
 * @Author: kevin
 * @Date: 2022-04-02 10:27:51
 * @LastEditors: kevin
 * @LastEditTime: 2022-04-11 11:10:19
 * @Description: 新建二级目标
-->
<template>
  <kv-form v-bind="addSubFormConfig" v-model="formData" ref="ruleFormRef">
    <template #director>
      <el-cascader
        style="width: 100%"
        clearable
        filterable
        :show-all-levels="false"
        :props="cascaderProps"
        v-model="formData.director"
        @change="handelChanger"	/>
    </template>
    <template #evaluate>
      <el-button type="primary" size="small" @click="handleAddQuota"><el-icon style="vertical-align: middle"> <plus /> </el-icon></el-button>
    </template>
    <template #footer>
      <div class="useTable">
        <table style="width: 100%;">
          <tr>
            <th style="white-space: nowrap;">一级指标</th>
            <th style="white-space: nowrap;">二级指标</th>
            <th style="white-space: nowrap;">考评内容</th>
            <th style="white-space: nowrap;">考评细则</th>
            <th style="white-space: nowrap;">考评方式</th>
            <th style="white-space: nowrap;">分值</th>
            <th style="white-space: nowrap;">扣分原因</th>
            <th style="white-space: nowrap;">自评分</th>
            <th style="white-space: nowrap;">复评分</th>
          </tr>
          <tr v-for="(item, index) in showTableData" :key="index">
            <!-- <template v-for="(sb, sbIndex) in item" :key="sbIndex"> -->
            <td>{{ item[0].content }}</td>
            <td>{{ item[1].content }}</td>
            <td>{{ item[2].content }}</td>
            <td>{{ item[3].content }}</td>
            <td>{{ item[4].content }}</td>
            <td>{{ item[3].score }}</td>
            <!-- <td v-if="sbIndex === 5">{{ sb.score }}</td> -->
            <!-- </template> -->
            <td>&nbsp;</td>
            <td>&nbsp;</td>
            <td>&nbsp;</td>
          </tr>
        </table>

      </div>
      <div style="margin-top: 20px;text-align: right">
        <el-button type="primary" @click.prevent="handleAddTarget(ruleFormRef)">确定</el-button>
      </div>
    </template>
  </kv-Form>
  <!-- '选择考核内容' -->
  <kvDialog v-bind="selectConfig" v-model="selectConfig.dialogVisible" @callBack="confirm" @cancel="cancel">
    <kv-table
      :useTableData="useTableData"
      :propList="tablePropList"
      :isUseStoreData="false"
      :showIndexColumn="true"
      :showSelectColumn="true"
      :showFooter="false"
      @handleSelectionChange="handleSelectionChange">
    </kv-table>
  </kvDialog>
</template>

<script setup>
  import { ref, defineProps, defineEmits } from 'vue'
  import {
    addSubFormConfig,
    cascaderProps,
    selectModelConfig,
    tablePropList
  } from '../config/dataConfig'
  import { add, getList } from '@/api/target'
  import { getCycle, getQuotaLis, formatTableData } from '../hooks/hooks'
  const props = defineProps({
    rowData: {
      type: Object,
      default: () => (null)
    },
    subRowData: {
      type: Object,
      default: () => (null)
    },
    editType: {
      type: String,
      default: 'add'
    }
  })
  const emit = defineEmits(['callBack'])
  const selectConfig = ref(selectModelConfig)
  const ruleFormRef = ref({})
  const showTableData = ref([])
  const evaluateTargetDtoList = ref([])

  // 目标周期列表
  const formData = ref(getCycle(props.rowData))
  const useTableData = ref([])

  getQuotaLis().then(res => {
    useTableData.value = res
  })
  const handleAddQuota = () => {
    selectConfig.value.dialogVisible = true
  }
  formData.value.cycle1 = props.rowData.id
  const handelChanger = (row) => {}
  console.log('props.editType', props.editType)
  if (props.editType === 'edit') {
    getList({ id: props.subRowData.id }).then(res => {
      const { checkArea, director } = res.data
      res.data.checkArea = checkArea.split(',').map(item => +item)
      res.data.director = director.split(',').map(item => +item)
      formData.value = res.data
      handleSelectionChange(res.data.evaluateTargetDtoList)
    })
  }
  // 选择
  const handleSelectionChange = (value) => {
    console.log('value', value)
    const { tableData, list } = formatTableData(value)
    evaluateTargetDtoList.value = list
    console.log('tableData', tableData)
    showTableData.value = tableData
  }
  const confirm = (tyy) => {
    selectConfig.value.dialogVisible = false
  }
  const cancel = () => {
    evaluateTargetDtoList.value = []
    selectConfig.value.dialogVisible = false
  }

  const fn = add // props.editType === 'edit' ? modify : add // 修改和添加使用同一个接口
  const handleAddTarget = (formEL) => {
    formEL.$refs.ruleFormRef?.validate((valid) => {
      if (valid) {
        const { checkArea = [], director = [] } = formData.value
        evaluateTargetDtoList.value.forEach(i => { // id 不能提交
          delete i.id
          if (i.evaluateTargetDtoList?.length) {
            i.evaluateTargetDtoList.forEach(x => delete x.id)
          }
        })
        const params = {
          checkArea: checkArea.join(','),
          director: director.join(','),
          evaluateTargetDtoList: evaluateTargetDtoList.value
        }
        const obj = Object.assign({}, formData.value, params)
        fn(obj).then(res => {
          const { status } = res
          if (status?.code === '0') {
            emit('callBack')
          }
        })
      }
    })
  }
</script>

<style lang="less" scoped>
 .useTable {
   table {
     width: 100%;
     border-collapse: collapse;
   }
   td, th{
     padding: 8px 6px;
     border: 1px solid #dcdfe6;
     line-height: 1.4;
   }
 }
</style>
