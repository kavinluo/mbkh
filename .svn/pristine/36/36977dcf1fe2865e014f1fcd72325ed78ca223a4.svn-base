<!--
 * @Author: kevin
 * @Date: 2022-03-02 10:46:03
 * @LastEditors: kevin
 * @LastEditTime: 2022-05-09 09:16:46
 * @Description: 添加菜单
-->
<template>
  <kv-form v-bind="formConfig" v-model="formData">
    <template #isSee>
      <el-switch
        size="large"
        v-model="formData.isSee"
        inline-prompt
        :active-value="1"
        :inactive-value="0"
        active-text="是"
        inactive-text="否"/>
    </template>
    <template #parentId>
      <el-cascader
        v-model="formData.parentId"
        :options="menuList"
        clearable
        placeholder="请选择父级菜单"
        :props="userProps" />
    </template>
    <template #application>
      <el-select
        v-model="formData.application"
        clearable
        placeholder="选择所属应用">
        <el-option
          v-for="option in appList"
          :key="option.id"
          :value="option.id"
          :label="option.title"></el-option>
      </el-select>
    </template>
    <template #footer>
      <div class="handle-btns" style="text-align: center">
        <el-button type="primary" @click.prevent="onSubmit(ruleFormRef)">提交</el-button>
        <el-button type="warning" @click="handleResetClick">关闭</el-button>
      </div>
    </template>
  </kv-Form>

</template>

<script setup>
import { ref } from 'vue'
import formConfig from './formConfig'
import { addMenu, getMenu, editMenu } from '@/api/menu'
import { getListApplication } from '@/api/applicationManagemwnt'
 const props = defineProps({
    menuList: {
      type: Array,
      default: () => []
    },
    rowData: {
      type: Object,
      default: null
    },
    inputType: {
      type: String,
      default: 'add'
    }
  })
  //  组件相关
  const emit = defineEmits(['resetBtnClick', 'queryBtnClick', 'cancel', 'callBack'])
  const appList = ref([])
  const formItems = formConfig?.formItems ?? []
  const formOriginData = {}
  for (const item of formItems) {
    formOriginData[item.field] = ''
    if (item.field === 'application') {
      item.options = appList.value
    }
  }
  const formData = ref(formOriginData)
  formData.value.isSee = 1// 设置是否可见的默认值
  const handleResetClick = () => {
    emit('cancel')
    formData.value = formData
  }
  (async () => {
    const { data } = await getListApplication()
    appList.value = data
  })()
  const ruleFormRef = ref()
  const userProps = ref({
    value: 'id',
    label: 'title',
    checkStrictly: true,
    emitPath: false // 只保留当前选中的id
  })
  if (props.inputType === 'edit') {
    (async () => {
      const dealit = await getMenu(props.rowData?.id)
      formData.value = dealit.data
    })()
  }
  const fn = props.inputType === 'edit' ? editMenu : addMenu
  const onSubmit = () => {
    fn(formData.value).then((res) => {
      const { status } = res
      if (status?.code === '0') {
          emit('callBack')
      }
    })
  }
  // }
</script>

<style lang="scss" scoped>

</style>
