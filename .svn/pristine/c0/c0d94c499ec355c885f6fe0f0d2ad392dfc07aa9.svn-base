<!--
 * @Author: kevin
 * @Date: 2022-05-06 09:54:36
 * @LastEditors: kevin
 * @LastEditTime: 2022-05-12 12:04:08
 * @Description: 工作台首页
-->
<template>
  <!-- <div>
    <work-index />
  </div> -->
  <div>
    <router-view />
  </div>
  <el-row>
    <el-col :span="12">
      <div>
        <!-- 地图容器 -->
        <div id="myMap" ref="myMap" class="border"></div>
        <!-- 地图数据 -->
        <div class="mapData">
          <p>
            总&nbsp;考&nbsp;区&nbsp;：<span
              style="color: #008000; font-weight: 400"
            >{{ '123' }}</span
            >
          </p>
          <p>
            优&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;秀&nbsp;：<span
              style="color: #008000; font-weight: 400"
            >{{ '123' }}</span
            >
          </p>
          <p>
            合&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;格&nbsp;：<span
              style="color: #008000; font-weight: 400"
            >{{ '123' }}</span
            >
          </p>
          <p>
            限期整改：<span style="color: #008000; font-weight: 400">{{
              '123'
            }}</span>
          </p>
          <p>
            最&nbsp;高&nbsp;分&nbsp;：<span
              style="color: #008000; font-weight: 400"
            >{{ '123' }}</span
            >
          </p>
          <p>
            最&nbsp;低&nbsp;分&nbsp;：<span
              style="color: #008000; font-weight: 400"
            >{{ '123' }}</span
            >
          </p>
          <p>
            平&nbsp;均&nbsp;分&nbsp;：<span
              style="color: #008000; font-weight: 400"
            >{{ '123' }}</span
            >
          </p>
        </div>
      </div>
      <el-card >
        <span style="font-size:20px;color:#4b9cfe;margin-left:20px"><el-icon> <grid /> </el-icon>日程表</span>
        <div class="calendar" @click="calenDar">
          <div class="time-bottom">
            <div class="week">
              <span v-for="(item,index) in weeks" :key="index">{{ item }}</span>
            </div >
            <div class="day">
              <span v-for="(item,index) in date" :key="index" class="dayitem">{{ item }}</span>
            </div>
          </div>
        </div>
      </el-card>
    </el-col>
    <el-col :span="12">
      <div>
        <!-- 代办/已办事宜 -->
        <el-card class="doSth">
          <div class="box-card3">
            <p style="color: #65a7fe" @click="todo"><el-icon> <document /> </el-icon>代办/已办事宜</p>
            <div v-if="watiList.length === 0 "><img src="@/assets/img/temporarily.png" style="padding:5% 0 0 10%"></div>
            <div class="handle" v-for="item in watiList.slice(0, 2)" :key="item.number">
              <el-row :gutter="20" >
                <el-col :span="8">
                  <el-button type="primary" style="margin:17% 0 0 20px" @click="handleAddTemplate(item)">办理</el-button>
                </el-col>
                <el-col :span="15">
                  <p style="font-weight:700;font-size:15px">{{ item.content }}</p>
                  <p style="font-size:14px">提交日期:{{ formatTimestamp(item.times, 'YYYY-MM-DD') }}</p>
                </el-col>
              </el-row>
            </div>
          </div>
          <div class="box-card4">
            <p style="color: #65a7fe" @click="notice"><el-icon> <document /> </el-icon>公告</p>
            <div v-if="acceptList.length === 0 "><img src="@/assets/img/temporarily.png" style="padding:5% 0 0 10%"></div>
            <div class="handle" v-for="item in acceptList.slice(0, 2)" :key="item.id" >
              <el-row :gutter="20" >
                <el-col :span="8">
                  <el-button type="primary" style="margin:17% 0 0 20px" @click="handleView(item)">查看</el-button>
                </el-col>
                <el-col :span="15">
                  <p style="font-weight:700;font-size:15px">{{ item.content }}</p>
                  <p style="font-size:14px">提交日期:2019-05-08</p>
                </el-col>
              </el-row>
            </div>
          </div>
        </el-card>
        <el-card>
          <div class="box-card2">
            <el-row :gutter="10">
              <el-col :span="6" @click="library" class="library"><p><img src="@/assets/img/library.png"></p>指标库</el-col >
              <el-col :span="6" @click="setting" class="library"><p><img src="@/assets/img/Goalsetting.png"></p>目标设置</el-col>
              <el-col :span="6" @click="evaluation" class="library"><p><img src="@/assets/img/evaluation.png"></p>评价结果</el-col>
              <el-col :span="6" class="library"><p><img src="@/assets/img/Personal.png"></p>个人评优</el-col>
            </el-row>
          </div>
        </el-card>
        <!-- echarts图表 -->
        <el-card @click="card">
          <span class="evaluation"><el-icon> <reading /> </el-icon>评价排名</span>
          <div id="myChart12" class="echart"> </div>
        </el-card>
      </div>
    </el-col>
  </el-row>
  <kvDialog v-bind="editDialog" v-model="editDialog.dialogVisible">
    <editTarget :rowData="subRowData" @callBack="cancel" />
  </kvDialog>
  <kvDialog v-bind="viewDialog" v-model="viewDialog.dialogVisible">
    <toView :rowData="subRowDatas" />
  </kvDialog>
</template>

<script setup>
import { useState } from '@/hooks/index'
import { getwatiList } from '@/api/todoList.js'
import { acceptListPage } from '@/api/notice.js'
import { handeles } from './alreadyDoMatters/comMission/config/hooks'
import { handels } from './config/hook'
// import { useStore } from 'vuex'
import { formatTimestamp } from '@/utils/formatDate.js'
import editTarget from './alreadyDoMatters/comMission/editTarget.vue'
import toView from './toView.vue'
import {
  // computed,
  getCurrentInstance,
  onMounted,
  ref
} from 'vue'
  // import { setStaticData } from '@/utils/util'
import { useRouter } from 'vue-router'
import * as echarts from 'echarts'

    // const store = useStore()
    // const getters = useGetters(['useInfo'])
    // const storeStateFns = useState(['counter', 'name'])
    // const modulesInfo = useState(['userInfo'], 'user')
    const { userInfo } = useState(['userInfo'], 'user')
    const $router = useRouter()
    // const token = computed(() => store.state.Token)
    const weeks = ref(['周日', '周一', '周二', '周三', '周四', '周五', '周六'])
    const date = ref(['01', '02', '03', '04', '05', '06', '07'])
    const watiList = ref([])
    const role = ref(userInfo.value)
    const getTargetData = async () => {
     const { data } = await getwatiList()
        watiList.value = data
        console.log(watiList.value[0], 'rolerolerole')
    }
    getTargetData()
    const acceptList = ref([])
    const acceptData = async () => {
      const { data } = await acceptListPage({ pageSize: 10, curPage: 1 })
        acceptList.value = data.list
        console.log(acceptList.value, 'acceptListacceptListacceptList')
     }
    if (role.value.id !== 1) {
      acceptData()
    }

    // const updown = function () {
    //   store.commit('updown')
    // }
    // const add = function () {
    //   store.commit('add')
    // }
    const { proxy } = getCurrentInstance()
    const chart = ref(null)
    // 中国地图
    const mapOption = ref({
      backgroundColor: '#FFFFFF',
      geo: {
        map: 'china',
        roam: false,
        zoom: 1.2,
        scaleLimit: { min: 0, max: 50 }, // 缩放级别
        regions: [
          {
            name: '南海诸岛',
            value: 0,
            itemStyle: {
              normal: {
                opacity: 0,
                label: {
                  show: false
                }
              }
            }
          }
        ],
        itemStyle: {
          areaColor: '#BEDAEE', // 默认的地图板块颜色
          borderWidth: 1,
          borderColor: '#a597c5'
        }
      },
      title: {
        text: '{a|} 统计分析',
        y: 20,
        x: 15,
        textStyle: {
          color: '#4398fe',
          fontSize: 20,
           rich: {
                    a: {
                        // 这样设定 backgroundColor 就可以是图片了。
                        align: 'left',
                        backgroundColor: {
                            image: require('@/assets/img/computer.png')
                        },
                        // 可以只指定图片的高度，从而图片的宽度根据图片的长宽比自动得到。
                        height: 23
                    }
                }
        }
      },
      tooltip: {
        trigger: 'item'
      },

      // 配置属性
      series: [
        {
          name: '数据',
          type: 'map',
          mapType: 'china',
          roam: false,
          geoIndex: 0,
          label: {
            normal: {
              show: false // 省份名称,
            },
            emphasis: {
              show: false
            }
          },
          data: [
            { name: '北京', value: Math.round(Math.random() * 1000) },
            { name: '天津', value: Math.round(Math.random() * 500) },
            { name: '上海', value: Math.round(Math.random() * 500) },
            { name: '重庆', value: Math.round(Math.random() * 500) },
            { name: '河北', value: Math.round(Math.random() * 500) },
            { name: '河南', value: Math.round(Math.random() * 500) },
            { name: '云南', value: Math.round(Math.random() * 500) },
            { name: '辽宁', value: Math.round(Math.random() * 500) },
            { name: '黑龙江', value: Math.round(Math.random() * 500) },
            { name: '湖南', value: Math.round(Math.random() * 500) },
            { name: '安徽', value: Math.round(Math.random() * 500) },
            { name: '山东', value: Math.round(Math.random() * 500) },
            { name: '新疆', value: Math.round(Math.random() * 500) },
            { name: '江苏', value: Math.round(Math.random() * 500) },
            { name: '浙江', value: Math.round(Math.random() * 500) },
            { name: '江西', value: Math.round(Math.random() * 500) },
            { name: '湖北', value: Math.round(Math.random() * 500) },
            { name: '广西', value: Math.round(Math.random() * 500) },
            { name: '甘肃', value: Math.round(Math.random() * 500) },
            { name: '山西', value: Math.round(Math.random() * 500) },
            { name: '内蒙古', value: Math.round(Math.random() * 500) },
            { name: '陕西', value: Math.round(Math.random() * 500) },
            { name: '吉林', value: Math.round(Math.random() * 500) },
            { name: '福建', value: Math.round(Math.random() * 500) },
            { name: '贵州', value: Math.round(Math.random() * 500) },
            { name: '广东', value: Math.round(Math.random() * 500) },
            { name: '青海', value: Math.round(Math.random() * 500) },
            { name: '西藏', value: Math.round(Math.random() * 500) },
            { name: '四川', value: Math.round(Math.random() * 500) },
            { name: '宁夏', value: Math.round(Math.random() * 500) },
            { name: '海南', value: Math.round(Math.random() * 500) },
            { name: '台湾', value: Math.round(Math.random() * 500) },
            { name: '香港', value: Math.round(Math.random() * 500) },
            { name: '澳门', value: Math.round(Math.random() * 500) }
          ] // 数据
        }
      ]
    })
      // 待办
    const todo = () => {
      $router.push({ path: '/manage/alreadyDoMatters' })
      // setStaticData('defaultActiveValue', 93)
      // store.dispatch('changerCurrentValue', 93)
    }
         // 公告
    const notice = () => {
      $router.push({ path: '/manage/notice' })
      // setStaticData('defaultActiveValue', 94)
      // store.dispatch('changerCurrentValue', 94)
    }
    // 评价排名
    const card = () => {
      $router.push({ path: '/manage/alreadyDoMatters' })
    }
    // 指标库
    const library = () => {
      $router.push({ path: '/manage/quotalibrary' })
    }
    // 目标设置
    const setting = () => {
      $router.push({ path: '/manage/targetSettings' })
    }
    // 评价结果
    const evaluation = () => {
      $router.push({ path: '/manage/assessMent' })
    }
     // 日程表
    const calenDar = () => {
      $router.push('/manage/calenDar')
            // setStaticData('defaultActiveValue', 97)
      // store.dispatch('changerCurrentValue')
    }
    onMounted(() => {
      console.log(proxy, chart.value, mapOption.value)
      chart.value = proxy.$echarts.init(
        document.getElementById('myMap'),
        'macarons'
      )
      chart.value.setOption(mapOption.value)
      // 需要获取到element,所以是onMounted的Hook
      const myChart = echarts.init(document.getElementById('myChart12'))
      // 绘制图表
      myChart.setOption({
        color: ['#3398DB'],
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            // 坐标轴指示器，坐标轴触发有效
            type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
          }
        },
        grid: {
          containLabel: true
        },
        xAxis: [
          {
            type: 'category',
            data: [
              '北京',
              '上海',
              '石家庄',
              '河北',
              '沈阳',
              '长春',
              '河南',
              '新疆',
              '内蒙古',
              '山东'
            ],
            axisTick: {
              alignWithLabel: true
            }
          }
        ],
        yAxis: [
          {
            type: 'value'
          }
        ],
        series: [
          {
            name: '直接访问',
            type: 'bar',
            barWidth: '60%',
            data: [900, 850, 800, 750, 700, 650, 600, 550, 500, 450, 400]
          }
        ]
      })
      // window.onresize = function () { // 自适应大小
      //   myChart.resize()
      // }
    })
    const {
     handleAddTemplate,
     cancel,
     subRowData,
     editDialog
    } = handeles()
    const { handleView, viewDialog, subRowDatas } = handels()
</script>

<style scoped>
#myChart12 {
  width: 900px;
  height: 290px;
}
.box-card2 {
  width: 900px;
  height: 184px;
  text-align: center;
  margin-left: 25px;
}
.doSth {
  display: flex;
}
.box-card3 {
  height: 310px;
  margin-left: 80px;
  flex: 1;
  justify-content: flex-end;
  align-items: center;
  border-right:#94cff2 1px dashed
}
.box-card4 {
  height: 310px;
  flex: 1;
  justify-content: flex-end;
  align-items: center;
  margin-left:10px
}
#myMap {
  width: 800px;
  height: 600px;
}
.mapData {
  position: absolute;
  left: 43rem;
  top: 19rem;
  width: 200px;
  height: 250px;
  border: 1px solid black;
  margin: 30px 0 0 30px;
  text-align: center;
}
.el-col.el-col-6.is-guttered {
  margin-top: 25px;
}
.evaluation {
  margin-left: 80px;
  color: #65a7fe;
}
.handle{
  width: 400px;
  margin-top:20px;
  background-color: #f0f5f9;
  line-height:13px
}
.calendar{
	padding:0.75rem 0.75rem 0rem;
	text-align:center;
	margin-bottom:0.75rem;
}
.week,.day {
	text-align:left;
	display:flex;
	justify-content:center;
	align-items:center;
}
.week span {
	flex:1;
	color:#8A8A8A;
	font-size:0.75rem;
  text-align: center;
}
.week {
  height: 50px;
  background-color: #f3f3f3;

}
.day span {
	flex:1;
}
.day{
  height: 50px;

}
.dayitem {
	width:1.2rem;
	height:1.2rem;
	border-radius:50%;
	color:#838385;
	font-size:0.75rem;
	display:inline-block;
	line-height:1.2rem;
}
.library{
  color:#6d6d6d
}
.scrollbar-demo-item {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 50px;
  margin: 10px;
  text-align: center;
  border-radius: 4px;
  background: var(--el-color-primary-light-9);
  color: var(--el-color-primary);
}
</style>
