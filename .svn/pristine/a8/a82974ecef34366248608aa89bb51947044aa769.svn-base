/*
 * @Author: kevin
 * @Date: 2022-05-11 14:54:13
 * @LastEditors: kevin
 * @LastEditTime: 2022-05-18 11:43:31
 * @Description: 汇总表评分
 */
import { ref } from 'vue'
import { selfListPage, addBatch, remove } from '@/api/process'
import { useState } from '@/hooks/index'
/**
 * @param {*} cancelTargetModle 需要关闭的模态框
 * @param {*} targetData 当前目标数据
 * @returns
 */
export const setScoreFn = (cancelTargetModle, targetData) => {
  const { userInfo } = useState(['userInfo'], 'user')
  const role = ref(userInfo.value)
  const selfListData = ref({})
  const evaluateSelf = ref([]);
   (async () => {
    const { data } = await selfListPage({
      pageSize: 1000,
      curPage: 1,
      targetId: targetData.id
    })
    const { evaluateSelfDto, evaluateSelfSumDto } = data
    selfListData.value = formatObj(evaluateSelfDto.list, targetData, role.value)
    evaluateSelf.value = evaluateSelfSumDto ? [evaluateSelfSumDto] : []
  })()
  // 增加行
  const pushFn = (key) => {
    selfListData.value[key].push({
      areaName: '', // 考点名称\考评项目
      analyse: 0, // 数据分析
      areaType: key,
      discipline: 0, // 考风考纪
      ending: 0, // 考后收尾
      implement: 0, // 考试实施
      prepare: 0, // 考前准备
      secrecy: 0, // 安全保密
      score: 0, // 总分
      // repeatedScore: evaluateSelfSumDto.value[0]?.repeatedScore,
      targetId: targetData.id
    })
  }
  // 删出行
  const deleteFn = (key, index, row) => {
    // 如果存在id需要发送请求删除
    if (selfListData.value[key][index]?.id) {
      remove(row.id)
    }
    selfListData.value[key].splice(index, 1)
    count(key)
  }
  // 计算总分
  const count = (key, index) => {
    selfListData.value[key].forEach(item => {
      item.score = +item.analyse + (+item.discipline) + (+item.ending) + (+item.implement) + (+item.prepare) + (+item.secrecy)
    })
  }
  //  提交
  const submitHandle = () => {
    const paramList = []
    Object.keys(selfListData.value).forEach(key => {
      selfListData.value[key].forEach(item => {
        for (const key in item) {
          if (key !== 'id') {
            item[key] = item[key] || 0
          }
        }
        item.repeatedScore = evaluateSelf.value[0]?.repeatedScore
        paramList.push(item)
      })
    })
    addBatch(paramList).then((res) => {
      cancelTargetModle()
    })
  }
  return {
    selfListData,
    role,
    pushFn,
    deleteFn,
    count,
    submitHandle,
    evaluateSelf
  }
}

/**
 *
 * @param {Array} list 返回的数据
 * @param {Object} targetData 目标数据
 * @param {Object} role 当前角色
 * @returns Array
 */
const formatObj = (list = [], targetData, role) => {
  const objList = {
    // 1: [],
    2: [], // 考点自评评分统计表
    3: [] // 考试基地自评评分统计表
  }
  list.forEach(item => {
    Object.keys(objList).forEach(key => {
      if (+key === item.areaType) {
        item.areaType = key
        item.targetId = targetData.id
        item.areaId = targetData.checkArea
        objList[item.areaType].push(item)
      }
    })
  })
  // 如果是管理 并且是空数据不需要显示
  if (role.userType !== 1) {
    Object.keys(objList).forEach(key => {
      if (!objList[key].length) {
        objList[key].push({
          id: '',
          areaId: targetData.checkArea,
          targetId: targetData.id,
          analyse: '', // 数据分析
          areaName: '', // 考点名称\考评项目
          areaType: key,
          isDelete: '',
          discipline: '', // 考风考纪
          ending: '', // 考后收尾
          implement: '', // 考试实施
          prepare: '', // 考前准备
          secrecy: '', // 安全保密
          score: '' // 总分
        })
      }
    })
    if (!list.length) {
      Object.keys(objList).forEach(key => {
        if (!objList[key].length) {
          objList[key].push({
            id: '',
            areaId: targetData.checkArea,
            targetId: targetData.id,
            analyse: '', // 数据分析
            areaName: '', // 考点名称\考评项目
            areaType: key,
            isDelete: '',
            discipline: '', // 考风考纪
            ending: '', // 考后收尾
            implement: '', // 考试实施
            prepare: '', // 考前准备
            secrecy: '', // 安全保密
            score: '' // 总分
          })
        }
      })
    }
}
  return objList
}
